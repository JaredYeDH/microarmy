#version 120
#define MAX_LIGHTS 8

attribute vec3 VertexPosition;
attribute vec2 VertexWrap;
/*attribute vec3 VertexNormal;*/
/*attribute vec4 VertexTangent;*/

uniform int NumLights;
varying float Depth;
uniform vec4 LightPos[MAX_LIGHTS];
varying vec3 LightDir[MAX_LIGHTS];
varying vec3 LightHalf[MAX_LIGHTS];

varying vec2 Wrap;
/*varying vec3 Tangent;*/
/*varying vec3 Bitangent;*/
/*varying vec3 Normal;*/

varying vec3 Eye;

uniform mat4 ModelViewProjection;
uniform mat4 ModelView;
uniform mat4 View;
uniform mat3 NormalMatrix;

void main(void)
{
    /*vec3 n = normalize(NormalMatrix * vec3(0.0, 0.0, -1.0));*/
    /*vec3 t = normalize(NormalMatrix * vec3(1.0, 0.0, 0.0));*/
    vec3 n = vec3(0.0, 0.0, 1.0);
    vec3 t = vec3(1.0, 0.0, 0.0);
    vec3 b = vec3(0.0, 1.0, 0.0);
    /*vec3 b = cross(n, t);*/
	/*vec3 b = cross(n, t) * VertexTangent.w;*/
	
	vec3 Position = vec3(ModelView * vec4(VertexPosition,1.0));
    
    for(int i=0; i<NumLights; i++){
        vec4 lightpos = View * vec4(LightPos[i].xyz,1.0);
        vec3 lightdir = vec3(lightpos) - Position;
        /*float dist = length(lightdir);*/
        /*LightDistV[i] = length(lightdir);*/
        vec3 lightdirn = normalize(lightdir);
        LightDir[i] = lightdir;
        LightHalf[i] = normalize(Position + lightdirn);
        /*LightDir[i] = vec3(*/
        /*    dot(LightDir[i],t),*/
        /*    dot(LightDir[i],b),*/
        /*    dot(LightDir[i],n)*/
        /*);*/
        /*LightHalf[i] = vec3(*/
        /*    dot(LightHalf[i],t),*/
        /*    dot(LightHalf[i],b),*/
        /*    dot(LightHalf[i],n)*/
        /*);*/
    }
    
    Eye = -Position;
    Eye = vec3(
        dot(Eye, t),
        dot(Eye, b),
        dot(Eye, n)
    );
    Eye = normalize(Eye);
    
    Wrap = VertexWrap;
    /*Tangent = VertexTangent.xyz;*/
    /*Normal = VertexNormal;*/
    gl_Position = ModelViewProjection * vec4(VertexPosition,1.0);
    Depth = gl_Position.z;
}

